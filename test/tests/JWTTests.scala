package tests

import com.malliina.pics.auth._
import com.nimbusds.jwt.JWTClaimsSet
import org.scalatest.FunSuite

class JWTTests extends FunSuite {
  val validator = LiberalValidator.auth0

  test("expired JWT fails") {
    val token = AccessToken("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik9UYzVSamM1TVVVM00wTTVNak0yT1VKRk5VTTFNakpCUmpjelJFVXdRVFl5TWtSRk1UZEJSQSJ9.eyJpc3MiOiJodHRwczovL21hbGxpaW5hLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDExMjk2NjE3MjA5OTY1MDE1MjMzNyIsImF1ZCI6WyJodHRwczovL3BpY3MubWFsbGlpbmEuY29tIiwiaHR0cHM6Ly9tYWxsaWluYS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNTExODE4MDc1LCJleHAiOjE1MTE5MDQ0NzUsImF6cCI6IjNiZ0hZNThrVUxxa25IOXRRS0lrM3k2aENYRUZ1aVJrIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSJ9.PpDKuznMDI90DTxsrvLL_ItwJuhqfJ-IolPwgOtWHzg9rj-ZRPHF5r_E7EtKfQ70MKobdVkRAILn-pH75lRCfJZUAtNHUIAfpD0yrJpum8YiBd174VP2BbfS8w0IP23wXdWP9IUKp4DPNoKx2QULnUtW1RI7g1LXh5Y5IRFbBTMj9UNmjrqBS-vYyupfaj2heSDfKy_o2BBUQYOdVvGKMjVVwzZkeuPn-2t6x6NzA4LX_--ejOKMMCL8Y63EOEGQpu0oJKpXKF6xnvXOtn_fPz5LAH1_2U9ePkntCAuk8HVnozB22W9Za5R7Tg4NX747GAqKzbAGNcEcdWzkW9z2rg")
    //    val token = AccessToken("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik9UYzVSamM1TVVVM00wTTVNak0yT1VKRk5VTTFNakpCUmpjelJFVXdRVFl5TWtSRk1UZEJSQSJ9.eyJpc3MiOiJodHRwczovL21hbGxpaW5hLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDExMjk2NjE3MjA5OTY1MDE1MjMzNyIsImF1ZCI6WyJodHRwczovL3BpY3MubWFsbGlpbmEuY29tIiwiaHR0cHM6Ly9tYWxsaWluYS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNTExODE3ODY0LCJleHAiOjE1MTE5MDQyNjQsImF6cCI6IjNiZ0hZNThrVUxxa25IOXRRS0lrM3k2aENYRUZ1aVJrIiwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSJ9.K0q9vufUQ5XZYrD6qjXTSMkwz0HvoR1LM5icuNIhx9vFbTZ9JnTPiQLr_egvF-OGBwnqv9A1Qf_9LD4lY6aYwGoyQ9Qv99z6_acRY1Gf2LRfUjADBboIQh5baLz5nZn0YsPoyJWKoVtjMFiKIhT7kpBPXnXrkVTIMYX3OGMw7jSsq9foSKAbXBkePnd-6RdQVjLRjbzyN6p1uXiJxCI2V-OFyM-MDUOJnHtk_wtZ7vBC-3r1IutkgoVpNkSsr3gBtmyM_uNKJLMVrHjU6_rHIWAdNJOskLCSamMz36yeQqNqEckq2bq3IOTVDW1cjtgEAoHq8TrM1rTZmKQcIkHB1w")
    val result = validator.validate(token)
    assert(result.left.exists(_.isInstanceOf[Expired]))
  }

  test("valid JWT succeeds") {
    val tokenNoScopes = AccessToken("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik9UYzVSamM1TVVVM00wTTVNak0yT1VKRk5VTTFNakpCUmpjelJFVXdRVFl5TWtSRk1UZEJSQSJ9.eyJpc3MiOiJodHRwczovL21hbGxpaW5hLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1YTFjNjg0NGY5NmFhMTJkNzEzMzA4NTEiLCJhdWQiOiJodHRwczovL3BpY3MubWFsbGlpbmEuY29tIiwiaWF0IjoxNTExOTgzMTE4LCJleHAiOjE1MTIwNjk1MTgsImF6cCI6IjNiZ0hZNThrVUxxa25IOXRRS0lrM3k2aENYRUZ1aVJrIn0.YKNDl4vOIUKhn_T-PKIldxhub5RlwH19Ab9OWQH0kM_9JMYSoiqDYfapVN7DIzmIzzZWTNgmrWy34ybHCvKM8ok9304iacqQ_AUsxvYq30cSsfy7emJAKGQxnmvJfIncYqcwHSYyQCPexeok8o3JyvK82NMidF_TRLffVqSh1WGU5rb6vDSIm7VO_lOYUlN_5nngvN5uar8r_KbUPv_WXEETNBOgpwqn6InIdsT-YiQvjzxN3_BpC3tcLD3TGWYQOpUMwzSlJYoDlWOw2D-hGXzUKIY5yBNFI0O1PjaCf74Fvc9PfbrYaKQO5Oo3LZpxUu_xcivhbuc_LNOYCnAN4g")
    val tokenScoped = AccessToken("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik9UYzVSamM1TVVVM00wTTVNak0yT1VKRk5VTTFNakpCUmpjelJFVXdRVFl5TWtSRk1UZEJSQSJ9.eyJpc3MiOiJodHRwczovL21hbGxpaW5hLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1YTFjNjg0NGY5NmFhMTJkNzEzMzA4NTEiLCJhdWQiOiJodHRwczovL3BpY3MubWFsbGlpbmEuY29tIiwiaWF0IjoxNTExOTg0OTkyLCJleHAiOjE1MTIwNzEzOTIsImF6cCI6IjNiZ0hZNThrVUxxa25IOXRRS0lrM3k2aENYRUZ1aVJrIiwic2NvcGUiOiJyZWFkOnBob3RvcyB3cml0ZTpwaG90b3MifQ.LMVz69bMCl-5hnwlyvJm_XkWBLAU5ZZOYpzd9H0cWeTFVWTjWi1zIdImoVW-30geJl5kPxkkSH-qSn8GyMnOFO_rR0hSzWGmaqHtw7yWL4RmI71PLtFFOw-0GKhsu3Tl_9UK2g6mhPiG2gFSVJm51rTztPdkkjWe1TRHqQzBXbC4YuVqHIKPUxfpsbgY6INa_UunpqCUarIT949LdC8WUSoJignvhooHtBrtdVcAUjMpvj4N3o9JKGgzSMqP63K0fs5f8prafR8uf6j1exIoDN_wIU_3wXXOozsD85dqpnLemz3Q0j9RHQpHIdsQcI5p_J38S2TJOEIsSo-FZobjDg")
    val tokenGrouped = AccessToken("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik9UYzVSamM1TVVVM00wTTVNak0yT1VKRk5VTTFNakpCUmpjelJFVXdRVFl5TWtSRk1UZEJSQSJ9.eyJpc3MiOiJodHRwczovL21hbGxpaW5hLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDExMjk2NjE3MjA5OTY1MDE1MjMzNyIsImF1ZCI6Imh0dHBzOi8vcGljcy5tYWxsaWluYS5jb20iLCJpYXQiOjE1MTE5ODkyNDEsImV4cCI6MTUxMjA3NTY0MSwiYXpwIjoiM2JnSFk1OGtVTHFrbkg5dFFLSWszeTZoQ1hFRnVpUmsiLCJzY29wZSI6InJlYWQ6cGhvdG9zIHdyaXRlOnBob3RvcyJ9.PV1PLJJCVhu_WrMc25uVFWLqTODZVFEvEh47pzKvADgkGTfGdXBm6Rj_o2f5zjkKraYrOn215TybMWPzl9HBO174J6T8WuJcOcUI1zLlPQdGMvPk4gEsbuHQI-W6HvrFHPDqoBGUzv_rZ260vND1O1hMwyuYw0s2Wt9LeXfQc75shN8WpgEFan-OvE3WV7NRWpBpHzLW7VABw8dNRRz4bsVLNH8IyxXpaA7b5ofFr7acMqtF4O_4R5J-a5SEHPgUyeMKTKXRRqaCre5k46JzzO6acqqY6f-Z2b2JzzWO4Axrgx29leLgSJk5Up6c1znd0dFX8MMyk6x4XSh9OIWv2Q")
    val token = AccessToken("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik9UYzVSamM1TVVVM00wTTVNak0yT1VKRk5VTTFNakpCUmpjelJFVXdRVFl5TWtSRk1UZEJSQSJ9.eyJpc3MiOiJodHRwczovL21hbGxpaW5hLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJnb29nbGUtb2F1dGgyfDExMjk2NjE3MjA5OTY1MDE1MjMzNyIsImF1ZCI6WyJodHRwczovL3BpY3MubWFsbGlpbmEuY29tIiwiaHR0cHM6Ly9tYWxsaWluYS5ldS5hdXRoMC5jb20vdXNlcmluZm8iXSwiaWF0IjoxNTExOTkwMzU1LCJleHAiOjE1MTIwNzY3NTUsImF6cCI6IjNiZ0hZNThrVUxxa25IOXRRS0lrM3k2aENYRUZ1aVJrIiwic2NvcGUiOiJyZWFkOnBob3RvcyB3cml0ZTpwaG90b3Mgb3BlbmlkIn0.C8Zstb5cFsW_d-t7U6RRSro-zGLl7FAX-owChN9D8kL38ES784adqZgofAV3la5M4XMtAFwQF0zHX-m-iLq2ydB4XEQDLSQQqSF8GwoRp0n9Db10e-iqwjAa5XgzIAwF727eO1uy47xbNwQek2Ed60NaCl4CK47x06q-ZMkDjz28L_Lcnt5dxkyxOtTDqico2JuFVhngyp3x9QkaFUb3VSAeM55rkB2UgMz0xtDxjjGFqvZrBedMQpL_AfK8yF9EgSf-Gm7Km6veMliDSG3Z5Zfjdn-NFQTb0FPlF50TSayKA8_J1hjQQ8FDYzFLHLFFa10DbUmsXnG5xv61i0QMcg")
    val token2 = AccessToken("eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik9UYzVSamM1TVVVM00wTTVNak0yT1VKRk5VTTFNakpCUmpjelJFVXdRVFl5TWtSRk1UZEJSQSJ9.eyJpc3MiOiJodHRwczovL21hbGxpaW5hLmV1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1YTFjNjg0NGY5NmFhMTJkNzEzMzA4NTEiLCJhdWQiOiJodHRwczovL3BpY3MubWFsbGlpbmEuY29tIiwiaWF0IjoxNTExOTg5Mjg0LCJleHAiOjE1MTIwNzU2ODQsImF6cCI6IjNiZ0hZNThrVUxxa25IOXRRS0lrM3k2aENYRUZ1aVJrIiwic2NvcGUiOiJyZWFkOnBob3RvcyB3cml0ZTpwaG90b3MifQ.LyHFVD-drrbi6Ry_qP07hfylU8xRIAJYTaAii3EtlrzHJf1J2IJDpIflazh5DZ-psl8WFVO-U2k1M2WZdyZmyzbNrT5dC-Vq4ggMyeNgmBdPS1e8bBxB2BHZ1ALIRgWImZQ9honliS2qFkuNAn091_ufWcQReRH4UxLHpgYDm7SFLya8xCZCGHk6XE98DPCIW7vqjnx1TuJOL2AYM0aNhR8WJZJtiFhx7ps1HbRV8bGTcGImuNoW2Eg6WQzsywhvVys0H35Tek_xRG05lP-BFYOTmSwe8mLpPdp6KDRYNIJaQ85NpL5DatSW3addPJR_DGrdPSmLpzP_Gqk1wFzGWg")
    val result = validator.validate(token)
    assert(result.isRight)
    println(result.right.get.parsed.jwt.getJWTClaimsSet.toJSONObject)
  }

  test("create token") {
    println(new JWTClaimsSet.Builder().issuer("mle").audience("world").claim("scopes", Array("read", "write")).build().toJSONObject)
  }
}
